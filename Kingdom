import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;
import java.util.ArrayList;

class Result {

    /*
     * Complete the 'countPaths' function below.
     *
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. 2D_INTEGER_ARRAY edges
     */

    public static void countPaths(int n, List<List<Integer>> edges) 
    {
        //convert edegs list to two diferent arrays
        
        int l=edges.size();int i,j=0;
        Integer s[] = new Integer[l];
        Integer d[] = new Integer[l];
        //System.out.println(l);
        int g=0;
        for(i=0;i<l;i++)
        {
            List<Integer> l1 = new ArrayList<>();
            l1=edges.get(i);
            s[i]=l1.get(0);
            d[i]=l1.get(1);
            //System.out.println(s[i]+" "+d[i]);
        }
        
        int a=1,b=0,si,di,paths=0,cond=0;
        //List<Integer> count=new ArrayList<>(l);
        int[] count={-1,-1,-1,-1,-1};
        //while(cond==0){System.out.println("workwhile");cond=1;}
        while(cond==0)
        {
            j=0;
            for (i=0; i<s.length; i++) 
            {
                if (s[i] == a)
                {
                    count[j]=i;
                    //count.add(i);
                    j++;
                }
            }
            int nn=0;
            for(i=0;i<count.length;i++){j=count[i];if(j!=-1){nn++;}}
            //if(nn>1)
            //{ 
                //int nn=0;
                //for(i=0;i<count.length;i++){j=count[i];if(j!=-1){nn++;}}
                for(i=0;i<nn;i++)
                {
                    j=count[i];
                    
                    //if(j!=-1){
                    if(d[j]<s[j]){cond=1;break;}
                    else if(d[j]>s[j])
                    {
                        if(nn>1){paths+=i;}//System.out.printaln(paths);
                    }//}
                }
            //}
            di = count[0];//System.out.println(di);
            b = d[di];
            if(cond==1){break;} 
            if(b==5){//paths+=1;
            cond=2;break;}
            a=b;//System.out.println(a);
        }
        if(cond==1){System.out.println("INFINITE PATHS");}
        else if(cond==2){System.out.println(paths);}
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int nodes = Integer.parseInt(firstMultipleInput[0]);

        int m = Integer.parseInt(firstMultipleInput[1]);

        List<List<Integer>> edges = new ArrayList<>();

        IntStream.range(0, m).forEach(i -> {
            try {
                edges.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        Result.countPaths(nodes, edges);

        bufferedReader.close();
    }
}
